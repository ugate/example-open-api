# see: https://swagger.io/specification/#infoObject
openapi: 3.0.3
info:
  description: "Users `microservice` API.      For this sample,
    you can use the api key `special-key` to test the
    authorization     filters."
  version: 1.0.0
  title: OpenAPI example
  termsOfService: http://github.com/ugate/example-open-api/terms.md
  contact:
    email: ugate.public@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: user
    description: Operations about users
    externalDocs:
      description: Find out more about users
      url: https://github.com/ugate/example-open-api
# "paths" are defined within the routes themselves using the "swagger-jsdoc" module
externalDocs:
  description: Source code
  url: https://github.com/ugate/example-open-api
#servers:
#  - url: http://api.example.com/v1
#    description: Production server
#  - url: http://staging-api.example.com
#    description: Internal staging server for testing
# "paths" are defined within the routes themselves using the "swagger-jsdoc" module
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of users
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      description: User body content
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: my_username
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
          enum:
            - active
            - inactive
        roles:
          $ref: "#/components/schemas/Role"
    Role:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: admin
        status:
          type: string
          description: Role status
          enum:
            - active
            - inactive
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string